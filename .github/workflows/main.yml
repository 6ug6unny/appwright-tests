name: AppWright Test

on: [push]

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (for job server)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install server dependencies
        run: npm install express uuid cors

      - name: Start job server in background
        run: |
          node server.js &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/jobs; do sleep 1; done'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install CLI dependencies
        run: pip install requests

      - name: Submit test jobs
        id: submit
        run: |
          echo "Submitting onboarding test..."
          JOB_ID_ONBOARDING=$(python qgjob.py submit \
            --org-id=qualgent \
            --app-version-id=xyz123 \
            --test=tests/onboarding.spec.js \
            --priority=high \
            --target=emulator | grep "Job ID:" | awk '{print $3}')
          echo "job_id_onboarding=$JOB_ID_ONBOARDING" >> $GITHUB_OUTPUT

          echo "Submitting login test..."
          JOB_ID_LOGIN=$(python qgjob.py submit \
            --org-id=qualgent \
            --app-version-id=xyz123 \
            --test=tests/login.spec.js \
            --priority=normal \
            --target=device | grep "Job ID:" | awk '{print $3}')
          echo "job_id_login=$JOB_ID_LOGIN" >> $GITHUB_OUTPUT

      - name: Poll for completion
        run: |
          fail=0

          poll() {
            job_name=$1
            job_id=$2

            echo "Polling $job_name (ID: $job_id)..."
            while true; do
              status=$(python qgjob.py status --job-id=$job_id | \
                python -c "import sys, json; print(json.load(sys.stdin).get('status','unknown'))")
              echo "$job_name status: $status"
              if [ "$status" == "completed" ]; then
                echo "$job_name passed!"
                return 0
              elif [ "$status" == "failed" ]; then
                echo "$job_name failed!"
                return 1
              fi
              sleep 3
            done
          }

          # Poll in parallel
          poll "Onboarding Test" "${{ steps.submit.outputs.job_id_onboarding }}" &
          PID1=$!
          poll "Login Test" "${{ steps.submit.outputs.job_id_login }}" &
          PID2=$!

          # Wait and collect results
          if ! wait $PID1; then fail=1; fi
          if ! wait $PID2; then fail=1; fi

          if [ $fail -eq 1 ]; then
            echo "One or more tests failed"
            exit 1
          else
            echo "All tests passed"
          fi

      - name: Cleanup
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

